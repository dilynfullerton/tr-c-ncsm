#!/usr/bin/python
"""
$ python doVCE.py <Aeff> <outfile> [<he4_fname> <he5_fname> <he6_fname>]

Generates an interaction file based on He4, He5, and He6
output files.
"""

from sys import argv


def get_e0(aeff, he4_fname):
    if he4_fname is not None:
        fname = he4_fname
    else:
        fname = 'he4_%d/he4_A%d.out' % (aeff, aeff)
    f = open(fname)
    line = f.readline()
    while 'State # 1   Energy' not in line:
        line = f.readline()
    ldat = line.split()
    e0 = float(ldat[5])
    return e0


def get_spe(aeff, e0, he5_fname):
    np1, np3 = 999., 999.
    if he5_fname is not None:
        fname = he5_fname
    else:
        fname = 'he5_%d/he5_A%d.out' % (aeff, aeff)
    f = open(fname)
    for line in f:
        if 'State # ' not in line:
            continue
        ldat = line.split()
        e = float(ldat[5])
        j = int(2 * float(ldat[8]))
        if j == 1 and np1 == 999.:
            np1 = e - e0
        if j == 3 and np3 == 999.:
            np3 = e - e0
        if np1 != 999. and np3 != 999.:
            break
    return np1, np3


def print_header(aeff, e0, spe, st='%d'):
    header_lines = list()
    header_lines.append(
        '!  Effective SM interaction generated by OLS and VCE with Aeff = ' +
        st % (aeff,))
    header_lines.append('!  Zero body term: %10.6f' % (e0,))
    header_lines.append('!  Index  n  l  j tz')
    header_lines.append('!  1     0  1  1  1')
    header_lines.append('!  2     0  1  3  1')
    header_lines.append('! ')
    header_lines.append(
        '-999 ' + '  '.join(['%10.6f' % x for x in spe]) + '  4  6  0.000000')
    return '\n'.join(header_lines) + '\n'


def get_tbme(aeff, e0, spe, out_fname, he6_fname, a_prescription=None):
    write_lines = list()
    if a_prescription is not None and (
                    a_prescription[0] != aeff or a_prescription[1] != aeff):
        write_lines.append(print_header(str(a_prescription), e0, spe, '%s'))
    else:
        write_lines.append(print_header(aeff, e0, spe))
    if he6_fname is not None:
        fname = he6_fname
    else:
        fname = 'he6_%d/Heff_OLS.dat' % aeff
    f = open(fname)
    line = f.readline()
    dim = int(line.split()[0])
    kets = []
    for i in range(dim):
        ldat = f.readline().split()
        p, q = [int(x) for x in ldat[1:3]]
        j, t = [int(x) for x in ldat[9:11]]
        kets.append({'p': p, 'q': q, 'J': j, 'T': t})
    for i in range(dim):
        ldat = f.readline().split()
        for j in range(i, dim):
            if (kets[i]['J'], kets[i]['T']) != (kets[j]['J'], kets[j]['T']):
                continue
            v = float(ldat[j])
            if i == j:
                v -= e0 + spe[kets[i]['p'] - 1] + spe[kets[i]['q'] - 1]
            next_line = '%3d %3d %3d %3d  %3d %3d  %10.6f' % (
                kets[i]['p'], kets[i]['q'], kets[j]['p'], kets[j]['q'],
                kets[i]['J'], kets[i]['T'], v)
            write_lines.append(next_line + '\n')
    # write the file
    outfile = open(out_fname, 'w')
    for line in write_lines:
        outfile.write(line)
    outfile.close()


def run(a_prescription, out_fname, he4_fname, he5_fname, he6_fname):
    e0 = get_e0(a_prescription[0], he4_fname)
    spe = get_spe(a_prescription[1], e0, he5_fname)
    get_tbme(a_prescription[2], e0, spe, out_fname, he6_fname)

    # Do the inconsistent/universal way
    # Aeff = 6
    # E0 = GetE0(Aeff-2)
    # SPE = GetSPE(Aeff-1,E0)
    # GetTBME(Aeff,E0,SPE)


# if len(argv) >= 3:  # running as a script
#     if len(argv) == 3:
#         a_prescription = (int(argv[1]),)*3
#         out_fname = argv[2]
#         he4_fname, he5_fname, he6_fname = (None,)*3
#     if len(argv) == 6:
#         a_prescription = (int(argv[1]),)*3
#         out_fname, he4_fname, he5_fname, he6_fname = argv[2:6]
#     elif len(argv) == 8:
#         a_prescription = tuple([int(x) for x in argv[1:4]])
#         out_fname = argv[4]
#         he4_fname = argv[5]
#         he5_fname = argv[6]
#         he6_fname = argv[7]
#     run(a_prescription=a_prescription, out_fname=out_fname,
#         he4_fname=he4_fname, he5_fname=he5_fname, he6_fname=he6_fname)
